# CyberPulse Analytics Platform - Kubernetes Deployment
# Author: Justin Christopher Weaver
# Description: Production-ready Kubernetes manifests

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: cyberpulse
  labels:
    app.kubernetes.io/name: cyberpulse
    app.kubernetes.io/part-of: cyberpulse-platform

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: cyberpulse-config
  namespace: cyberpulse
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "info"
  API_PORT: "8080"
  METRICS_PORT: "9090"
  REDIS_PORT: "6379"
  POSTGRES_PORT: "5432"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: cyberpulse-secrets
  namespace: cyberpulse
type: Opaque
stringData:
  DB_PASSWORD: "ChangeMeInProduction!"
  REDIS_PASSWORD: "ChangeMeInProduction!"
  JWT_SECRET: "ChangeMeInProduction!"
  ADMIN_PASSWORD: "ChangeMeInProduction!"

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: cyberpulse
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: cyberpulse
        - name: POSTGRES_USER
          value: cyberpulse_admin
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cyberpulse-secrets
              key: DB_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - cyberpulse_admin
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - cyberpulse_admin
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: cyberpulse
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres
  clusterIP: None

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: cyberpulse
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cyberpulse-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: redis
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: cyberpulse
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis

---
# API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cyberpulse-api
  namespace: cyberpulse
  labels:
    app: cyberpulse-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cyberpulse-api
  template:
    metadata:
      labels:
        app: cyberpulse-api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: cyberpulse-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: api
        image: ghcr.io/justinxy23/cyberpulse-analytics:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: DATABASE_URL
          value: "postgresql://cyberpulse_admin:$(DB_PASSWORD)@postgres:5432/cyberpulse"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: cyberpulse-secrets
              key: JWT_SECRET
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cyberpulse-secrets
              key: ADMIN_PASSWORD
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cyberpulse-secrets
              key: DB_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cyberpulse-secrets
              key: REDIS_PASSWORD
        envFrom:
        - configMapRef:
            name: cyberpulse-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - cyberpulse-api
              topologyKey: kubernetes.io/hostname

---
# API Service
apiVersion: v1
kind: Service
metadata:
  name: cyberpulse-api
  namespace: cyberpulse
  labels:
    app: cyberpulse-api
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: cyberpulse-api

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cyberpulse-api
  namespace: cyberpulse

---
# Role for API
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cyberpulse-api
  namespace: cyberpulse
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cyberpulse-api
  namespace: cyberpulse
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cyberpulse-api
subjects:
- kind: ServiceAccount
  name: cyberpulse-api
  namespace: cyberpulse

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: cyberpulse-api
  namespace: cyberpulse
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cyberpulse-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60

---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cyberpulse-api
  namespace: cyberpulse
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: cyberpulse-api

---
# NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cyberpulse-api
  namespace: cyberpulse
spec:
  podSelector:
    matchLabels:
      app: cyberpulse-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cyberpulse-api
  namespace: cyberpulse
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
spec:
  tls:
  - hosts:
    - api.cyberpulse.io
    secretName: cyberpulse-tls
  rules:
  - host: api.cyberpulse.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cyberpulse-api
            port:
              number: 80

---
# Celery Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cyberpulse-worker
  namespace: cyberpulse
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cyberpulse-worker
  template:
    metadata:
      labels:
        app: cyberpulse-worker
    spec:
      serviceAccountName: cyberpulse-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: worker
        image: ghcr.io/justinxy23/cyberpulse-analytics:latest
        command: ["celery", "-A", "src.tasks.celery_app", "worker", "--loglevel=info"]
        env:
        - name: DATABASE_URL
          value: "postgresql://cyberpulse_admin:$(DB_PASSWORD)@postgres:5432/cyberpulse"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379"
        - name: CELERY_BROKER_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379/0"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cyberpulse-secrets
              key: DB_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cyberpulse-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"

---
# CronJob for scheduled scans
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vulnerability-scan
  namespace: cyberpulse
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: cyberpulse-api
          restartPolicy: OnFailure
          containers:
          - name: scanner
            image: ghcr.io/justinxy23/cyberpulse-scanner:latest
            command: ["/app/scripts/vulnerability_scan.sh"]
            env:
            - name: API_URL
              value: "http://cyberpulse-api"
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: cyberpulse-secrets
                  key: API_KEY