# CyberPulse Analytics Platform - API Dockerfile
# Author: Justin Christopher Weaver
# Description: Multi-stage Docker build for the API server

# Stage 1: Builder
FROM python:3.11-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    libssl-dev \
    libffi-dev \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Copy requirements first for better caching
COPY requirements.txt .

# Create virtual environment and install dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --upgrade pip setuptools wheel
RUN pip install --no-cache-dir -r requirements.txt

# Stage 2: Runtime
FROM python:3.11-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    netcat-traditional \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r cyberpulse && useradd -r -g cyberpulse cyberpulse

# Set working directory
WORKDIR /app

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy application code
COPY --chown=cyberpulse:cyberpulse ./src /app/src
COPY --chown=cyberpulse:cyberpulse ./scripts/entrypoint.sh /app/entrypoint.sh
COPY --chown=cyberpulse:cyberpulse ./alembic.ini /app/alembic.ini
COPY --chown=cyberpulse:cyberpulse ./database/migrations /app/database/migrations

# Create necessary directories
RUN mkdir -p /app/logs /app/tmp && \
    chown -R cyberpulse:cyberpulse /app/logs /app/tmp

# Make entrypoint executable
RUN chmod +x /app/entrypoint.sh

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    PORT=8080

# Switch to non-root user
USER cyberpulse

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Run the application
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["uvicorn", "src.api_server:app", "--host", "0.0.0.0", "--port", "8080"]